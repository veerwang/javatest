package com.security.landicorp.vulnerabilitydetect;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;

import android.support.annotation.NonNull;
import android.support.design.widget.BottomNavigationView;
import android.support.v7.app.AppCompatActivity;
import android.view.MenuItem;

import android.widget.TextView;
import android.widget.Toast;

import android.content.Context;
import android.content.SharedPreferences;

import android.util.Log;

import android.view.View;
import android.view.View.OnClickListener;

import android.widget.Button;

import java.io.IOException;

public class MainActivity extends AppCompatActivity implements OnClickListener {

    private static final String ACTIVITY_TAG = "VulnerabilityDetect"; 
    private TextView mTextMessage;
    private Button startbnt;

    private static final int CODE_TEST_ONE   = 100;
    private static final int CODE_TEST_TWO   = 200;
    private static final int CODE_TEST_THREE = 300;

    private BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener
            = new BottomNavigationView.OnNavigationItemSelectedListener() {

        @Override
        public boolean onNavigationItemSelected(@NonNull MenuItem item) {
            switch (item.getItemId()) {
                case R.id.navigation_home:
                    mTextMessage.setText(R.string.title_home);
		    doProcess(getResources().getString(R.string.title_home));
                    return true;
                case R.id.navigation_dashboard:
                    mTextMessage.setText(R.string.title_dashboard);
		    doProcess(getResources().getString(R.string.title_dashboard));
                    return true;
                case R.id.navigation_notifications:
                    mTextMessage.setText(R.string.title_notifications);
		    doProcess(getResources().getString(R.string.title_notifications));
                    return true;
            }
            return false;
        }
    };

    private void showMessage(String val)
    {
	    Context context = getApplicationContext();
	    CharSequence text = val; 
	    int duration = Toast.LENGTH_SHORT;
	    Toast toast = Toast.makeText(context, text, duration);
	    toast.show();
    }

    private void doProcess(String val)
    {
	    showMessage(val);
    }

    private void initButton()
    {
	    startbnt =  (Button) findViewById(R.id.startbutton);
	    startbnt.setOnClickListener(this);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mTextMessage = (TextView) findViewById(R.id.message);
        BottomNavigationView navigation = (BottomNavigationView) findViewById(R.id.navigation);
        navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);

	initButton();

	JNIHub jnih = new JNIHub();
	jnih.printVersion();

	Context context = getApplicationContext();

	SharedPreferences sp = this.getSharedPreferences("app_information", MODE_PRIVATE);
	CharSequence text = getResources().getString(R.string.welcom_title) + jnih.getVersion() + "Start Num: " + Integer.toString(sp.getInt("Start_Number",0));
	int duration = Toast.LENGTH_SHORT;

	Toast toast = Toast.makeText(context, text, duration);
	toast.show();
	
	Log.v(MainActivity.ACTIVITY_TAG,"kevin --->  Activity Create");
    }

    @Override
    public void onDestroy() {
    	super.onDestroy();
	SharedPreferences sp = this.getSharedPreferences("app_information", MODE_PRIVATE);
	sp.edit().putInt("Start_Number",sp.getInt("Start_Number",0)+1).commit();
	Log.v(MainActivity.ACTIVITY_TAG,"kevin --->  Activity Destroy");
    }

    @Override
    public void onPause() {
    	super.onPause();
	Log.v(MainActivity.ACTIVITY_TAG,"kevin --->  Activity Pause");
    }

    @Override
    public void onResume() {
    	super.onResume();
	Log.v(MainActivity.ACTIVITY_TAG,"kevin --->  Activity Resume");
    }

    private Handler handler = new Handler(){
	    @Override
	    public void handleMessage(Message msg) {
		    switch (msg.what){
			    case CODE_TEST_ONE:
				    showMessage("开始线程....");
				    break;
			    case CODE_TEST_TWO:
				    showMessage("结束线程....");
				    break;
			    case CODE_TEST_THREE:
				    showMessage("默认线程消息");
				    break;
		    }
    	}
    };

    @Override
    public void onClick(View v) {
	switch (v.getId()) {
		case R.id.startbutton:
			showMessage("Start thread ....");

			new Thread(new Runnable() {
				@Override
				public void run() {
					handler.sendEmptyMessage(CODE_TEST_ONE);
					LocalHttpClient lhc = new LocalHttpClient();
					try {
						lhc.doPostProcess();
						try {
							Thread.sleep(4000);
						} catch ( InterruptedException e )
						{
							throw new RuntimeException("休眠时异常：",e);
						}
					} catch ( IOException e )
					{
						throw new RuntimeException("运行时异常：",e);
					}
					handler.sendEmptyMessage(CODE_TEST_TWO);
				}
			}).start();

			break;
		default:
			break;
         }
    }

}
